text = """
..#.#.....#.#...#.#.###.#######.#.#..###.#.##..###.##..###.#...##.##....#
.#....#.#.###.#...#.#.#..#.###........#.#####.##........#..#...##..#.....
##..#...#.....#######.##..#..##.#..#.##...#.#.##......#...#.##.###.....#.
#.###.#..#...#..#####.#..#.##..#...####..#..#.##....###.#.##.#.####...##.
.#.##.###..#.##..#.#####.#.#.##.###.###......#..#...#.##.#.....#.##..#.#.
#....##.####.##..##.##.....#...##.##....###.#.#..##.#.#..####......##.##.
.....###.#..##.......######..###.###..##..#####.#.##.####.##...#.#.###.##
....#.####.#..##.####.#..#.#.#.##......###..##.#..##.#..##.###.##..#..#..
##.#.#######.#.#####...##..###.#.#.#.##..#......##...###.#.#.#####.#..#.#
#.#.####...#####.##..#.#...##..#.####..##..###....#.#.#####.#.###...#.#.#
.....#.#.#####...##............###...#..##..#.....#########.#.#.#####..##
.###.#...##.#.#....###.#..#..#....#...#.##.#...#.###.#..######.#.#.##...#
..#..#........#..#.##.#.#.#.#...###.##.#..###.#.#..#..#..#....##.###.##..
##..#.#..#...##...#.............######.#.##...####.##.####.#.########..#.
..#..##.##..#.##...#.....###.###.#..##.#.#...#....######..#...####..###.#
#####..##......#..#.#.###.#....##...#####...###.....#..#..#..##...#..##..
#..###..#..###...#......##.....#...###.....##.....##..#.....#...#........
######.......##.##.###.#...####...####.#.##.#..#.#.#...#.......#...##.#.#
#.#..#.####.......###...#..####....#.##.##.....##.#.###.#...#..##.####.#.
#..#.#..##.##....##.#.....##.#..####..#..#.#....#...#.#.#..#.###.#....##.
..#..###...#..##.#....##.....#####..#..#..#.#.#.#....#.##..#####.###..#.#
#.##.#..##..####...#.#.####...##.#.##.##.#...#.#.###..#...#.#.#######.#..
.#.#.##......#####.#..####.....#..#####.###.#..###.##...#..#.#....##.####
###.##.#.##...#..####..#..#.#...####.#####..#.###.##.##...###..###.###.#.
.#.###.#.##...##.....###.#.###..#.#...#.....##...###.#..####.##.#..#..##.
##.#.....#..##..#####...##..####..##.#####.#.##...###......##.##....##...
.#..###.#.##.###..#....##.##...##..#.###...#.######.###....#.##.###.#####
####.######.##...#.....#.#.#.#######.##..##..#.#####..#######.######..#..
#..#.#.##..###.#####.###.#.##..#.#....##.#..##......#.####.##..#.####..##
.##..##..#.###...#####.###.####.###..######.##.#....###...#.#..####...#..
.#######..###.###..###...#.####...#...#...#.#...#.#...#....#.#...#....##.
####.#..###.#.#.#.###..##..#.#....###...#...#......#...#.###.#..###..##.#
#.#.#...#######..##.#.#.#...########.#.##...#.##.##...####...##.##.#..###
#...#####...##...####.#.#.#.####....#.##.###.##.#.###..##.#.##..#.#..##.#
##.#.#.##..#..#...##..#.#..#.#.#.#..###.#.####.##..#####.#...#.##..###.##
.#.#...##.##.#..#.##....##.###.#....#..#...##..#.##..##..#..#.#..#..##...
.####.###..#...###.#..#.##..#.....##..##..##..#.#..#.#.#...###...#....###
.###..#...##.####..#...#..#......#..#...##...##.##.##..#.##.........#...#
.....##..##.#..#..####.#.####..#..##..#..##..#.#..###.#.#.#...###.....#.#
.....##.##.####...#.###...###...####....#.##.######.#..#....#.##.#.##.#..
###..##.#.....#...#.#.....###..###...##.#..###..######.....##.#...#.####.
##.#####.#.#.##.#.....#.##....##.#######.##.#..#...#.......#####.#..##.##
.##.###.#..##.#...#..#...##.##.#..#.##...##.####.#......#..####.....#..#.
.######.###.###.#..##.....#..#..#..#.#.#.###.##.#....#####.#..####......#
.####.#....##.#...#....#.#..#..#.####.#.#####..##..#.####..#.####.##.####
##....#.#.#####.######..###.###....###..#.####.#.#.##..##..###.....#..###
.#...##.#...#......#.#.#..###...###.#..#..###..########.##...#.#.#..#.#..
##..#.##.#.#..#.#....###...########.#.###.####...###..###.#....##..#.####
#.#.##.#.#....##..#.....##...#.#.###.##....#..##....#..####.##.###..##...
#..#.#.#.####.###.#..###.#...##.##....##.###....#..##.....###..#####.####
#.#.####...##.##..###....###..........#.###########..##..#...#.#.#..##.#.
.#..#.#.#######.###.###....#.##..#.#..##..##..#.#..##.#.##..#####.##.##..
..#.###.#.#.###.##.#..#.#.##.#.##.#.#...##.##.##.#...##...#.#.#.##.#.....
.#...#...#.##..##.##.#.##.#...#..########..####.#...#.###..###.#.####....
##.##....###.#.#....#.####..#.#.#.#.......#...#.#.##...##.##.#.#.#####.##
#..##########.###..#.##.###....#..#.#.##..#.#....#########.#..#.#.##..##.
####.####.#....#...#..#..###.###...#...##..##.##.###.###..####....###..##
.##.#...####..##.###.##..###..#..###.###.##...#..#......#.###..#.#.#.#..#
##.##.##.###.#..###..##.#.##.##....#.###.#####.####.###...#.#.#.######..#
....#..#.####.##...#.#####.....#####.#######.##..#.###..###...####.#...##
##.....##.#..####..####..#.#.#..#.#.##..#...###..#..#..#.##.#...#####.#.#
########.#....##.##.#.#.#.#.#..#..#.##...#......#.##.#.#.###......#....##
...#.####.#..#.#..#..#..##...#.....#############.##.#..###.......###.##.#
....#.#..#.#.##.#.#######.######...#..#..#..###.####..######.####.###..#.
..####.#...#..#.###.###...###..#.#...#.#..##.#####......#..#.########....
##.#.##..#.....#.....#.###..#..#.#.#.#.##.##..#.#..#.###.#..#....##...###
#.###...###.#..#.##.....###.....#.##..#.....#..##..#.##.#.#.#..#..#...#..
#.#..##..#.##....#..##.#.#.#.####.####.#.....###.#..#..##..##.###..##.#.#
#.#.##...#...##..#.###.#..##.##.....#.#..######....#....#.###.#.##....#.#
#.......##.##..#####.#..#.#.##.#.######...#....##.##...#...#.#.#.##.###..
##..#.##..#.#......#####....#..###..#.#.#....##.##.##....#..####...#.#.#.
.#.###.#..#####.##.###.#..#....###.##...#.#...##.#...##...#..###..#.#.###
#....#...#..#..##.##.##...####.#.#.#...#.#.#.##.#...#.##.........#.##.#..
"""

text_test = """
..............
..............
.......#......
.....###.#....
...#...#.#....
....#...##....
...#.###......
...##.#.##....
....#..#......
..............
..............
..............
"""

text_simple = """
.....
..##.
..#..
.....
..##.
.....
"""


from collections import defaultdict

def parse(text):
    pad = 80
    m = {'.': 0, '#': 1}
    res = []
    for line in text.split('\n'):
        if not line.strip():
            continue

        res.append([0] * pad + list(m[c] for c in line.strip()) + [0] * pad)

    n = len(res[0])
    prepend = [[0] * n for _ in range(pad)]
    res = prepend + res
    for _ in range(pad):
        res.append([0] * n)

    return res

#print(parse(text_test))


def simulate_round(field, curdir):
    dirs = [[-1, 0], [1, 0], [0, -1], [0,1]]

    neigh = [[(-1, -1), (-1, 0), (-1, 1)],
             [(1, -1), (1, 0), (1, 1)],
             [(-1, -1), (0, -1), (1, -1)],
             [(-1, 1), (0, 1), (1, 1)],
             ]

    coord_count = defaultdict(int)
    choices = {}
    someone_moved = False

    # find each elf
    for i, row in enumerate(field):
        for j, c in enumerate(row):
            localdir = curdir
            if c == 0:
                continue

            # get all neighbors of elf, check if need to move
            neighbors_offsets = set()
            for io in [-1, 0, 1]:
                for jo in [-1, 0, 1]:
                    if io == 0 and jo == 0:
                        continue
                    if field [i + io][j + jo] == 1:
                        neighbors_offsets.add((io, jo))
            if not neighbors_offsets:
                continue

            # consider which cell to go to, remember the choice, increase counter for the coord.
            for _ in range(4):
                # consider curdir
                occupied = False
                for offsets in neigh[localdir]:
                    if offsets in neighbors_offsets:
                        occupied = True
                        break
                if occupied:
                    localdir = (localdir + 1) % 4
                    continue

                # curdir is not occupied
                io, jo = dirs[localdir]
                choices[(i,j)] = (i + io, j + jo)
                coord_count[(i + io, j + jo)] += 1
                break

    #print(choices)
    #print(coord_count)
    # iterate elf choices
    for elf, choice in choices.items():
        if coord_count[choice] > 1:
            continue
        someone_moved = True
        field[elf[0]][elf[1]] = 0
        field[choice[0]][choice[1]] = 1

    return field, someone_moved


def countempty(field):
    # find upmost elf
    up = 0
    for i, row in enumerate(field):
        if 1 in row:
            up = i
            break
    
    down = -1
    for i in range(len(field)-1, -1, -1 ):
        if 1 in field[i]:
            down = i+1
            break

    rows, cols = len(field), len(field[0])
    # find leftmost
    left = -1
    for col in range(cols):
        # iterate ith col
        occupied = False
        for row in range(rows):
            if field[row][col] == 1:
                occupied = True
                break

        if occupied:
            left = col
            break
            
    # find rightmost
    right = -1
    for col in range(cols-1, -1, -1):
        # iterate ith col
        occupied = False
        for row in range(rows):
            if field[row][col] == 1:
                occupied = True
                break

        if occupied:
            right = col+1
            break

    print(up, down, left, right)
    res = 0
    for i in range(up, down):
        vis = []

        for j in range(left, right):

            vis.append('.#'[field[i][j]])

            if field[i][j] == 0:
                res += 1

        # print(''.join(vis))
    return res

def run(text):

    field = parse(text)

    curdir = 0
    for i in range(10000):
        #countempty(field)
        field, moved = simulate_round(field, curdir)
        curdir = (curdir + 1) % 4
        if not moved:
            print(i+1)
            break

    # count the result

    print(countempty(field))
    
run(text)